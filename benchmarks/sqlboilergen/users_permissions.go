// Code generated by SQLBoiler 4.12.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package sqlboilergen

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// UsersPermission is an object representing the database table.
type UsersPermission struct {
	UserID int `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	PostID int `boil:"post_id" json:"post_id" toml:"post_id" yaml:"post_id"`

	R *usersPermissionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L usersPermissionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UsersPermissionColumns = struct {
	UserID string
	PostID string
}{
	UserID: "user_id",
	PostID: "post_id",
}

var UsersPermissionTableColumns = struct {
	UserID string
	PostID string
}{
	UserID: "users_permissions.user_id",
	PostID: "users_permissions.post_id",
}

// Generated where

var UsersPermissionWhere = struct {
	UserID whereHelperint
	PostID whereHelperint
}{
	UserID: whereHelperint{field: "\"users_permissions\".\"user_id\""},
	PostID: whereHelperint{field: "\"users_permissions\".\"post_id\""},
}

// UsersPermissionRels is where relationship names are stored.
var UsersPermissionRels = struct {
}{}

// usersPermissionR is where relationships are stored.
type usersPermissionR struct {
}

// NewStruct creates a new relationship struct
func (*usersPermissionR) NewStruct() *usersPermissionR {
	return &usersPermissionR{}
}

// usersPermissionL is where Load methods for each relationship are stored.
type usersPermissionL struct{}

var (
	usersPermissionAllColumns            = []string{"user_id", "post_id"}
	usersPermissionColumnsWithoutDefault = []string{"user_id", "post_id"}
	usersPermissionColumnsWithDefault    = []string{}
	usersPermissionPrimaryKeyColumns     = []string{"user_id", "post_id"}
	usersPermissionGeneratedColumns      = []string{}
)

type (
	// UsersPermissionSlice is an alias for a slice of pointers to UsersPermission.
	// This should almost always be used instead of []UsersPermission.
	UsersPermissionSlice []*UsersPermission
	// UsersPermissionHook is the signature for custom UsersPermission hook methods
	UsersPermissionHook func(context.Context, boil.ContextExecutor, *UsersPermission) error

	usersPermissionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	usersPermissionType                 = reflect.TypeOf(&UsersPermission{})
	usersPermissionMapping              = queries.MakeStructMapping(usersPermissionType)
	usersPermissionPrimaryKeyMapping, _ = queries.BindMapping(usersPermissionType, usersPermissionMapping, usersPermissionPrimaryKeyColumns)
	usersPermissionInsertCacheMut       sync.RWMutex
	usersPermissionInsertCache          = make(map[string]insertCache)
	usersPermissionUpdateCacheMut       sync.RWMutex
	usersPermissionUpdateCache          = make(map[string]updateCache)
	usersPermissionUpsertCacheMut       sync.RWMutex
	usersPermissionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var usersPermissionAfterSelectHooks []UsersPermissionHook

var usersPermissionBeforeInsertHooks []UsersPermissionHook
var usersPermissionAfterInsertHooks []UsersPermissionHook

var usersPermissionBeforeUpdateHooks []UsersPermissionHook
var usersPermissionAfterUpdateHooks []UsersPermissionHook

var usersPermissionBeforeDeleteHooks []UsersPermissionHook
var usersPermissionAfterDeleteHooks []UsersPermissionHook

var usersPermissionBeforeUpsertHooks []UsersPermissionHook
var usersPermissionAfterUpsertHooks []UsersPermissionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UsersPermission) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UsersPermission) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UsersPermission) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UsersPermission) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UsersPermission) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UsersPermission) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UsersPermission) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UsersPermission) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UsersPermission) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range usersPermissionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUsersPermissionHook registers your hook function for all future operations.
func AddUsersPermissionHook(hookPoint boil.HookPoint, usersPermissionHook UsersPermissionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		usersPermissionAfterSelectHooks = append(usersPermissionAfterSelectHooks, usersPermissionHook)
	case boil.BeforeInsertHook:
		usersPermissionBeforeInsertHooks = append(usersPermissionBeforeInsertHooks, usersPermissionHook)
	case boil.AfterInsertHook:
		usersPermissionAfterInsertHooks = append(usersPermissionAfterInsertHooks, usersPermissionHook)
	case boil.BeforeUpdateHook:
		usersPermissionBeforeUpdateHooks = append(usersPermissionBeforeUpdateHooks, usersPermissionHook)
	case boil.AfterUpdateHook:
		usersPermissionAfterUpdateHooks = append(usersPermissionAfterUpdateHooks, usersPermissionHook)
	case boil.BeforeDeleteHook:
		usersPermissionBeforeDeleteHooks = append(usersPermissionBeforeDeleteHooks, usersPermissionHook)
	case boil.AfterDeleteHook:
		usersPermissionAfterDeleteHooks = append(usersPermissionAfterDeleteHooks, usersPermissionHook)
	case boil.BeforeUpsertHook:
		usersPermissionBeforeUpsertHooks = append(usersPermissionBeforeUpsertHooks, usersPermissionHook)
	case boil.AfterUpsertHook:
		usersPermissionAfterUpsertHooks = append(usersPermissionAfterUpsertHooks, usersPermissionHook)
	}
}

// One returns a single usersPermission record from the query.
func (q usersPermissionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UsersPermission, error) {
	o := &UsersPermission{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilergen: failed to execute a one query for users_permissions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all UsersPermission records from the query.
func (q usersPermissionQuery) All(ctx context.Context, exec boil.ContextExecutor) (UsersPermissionSlice, error) {
	var o []*UsersPermission

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "sqlboilergen: failed to assign all query results to UsersPermission slice")
	}

	if len(usersPermissionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all UsersPermission records in the query.
func (q usersPermissionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: failed to count users_permissions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q usersPermissionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilergen: failed to check if users_permissions exists")
	}

	return count > 0, nil
}

// UsersPermissions retrieves all the records using an executor.
func UsersPermissions(mods ...qm.QueryMod) usersPermissionQuery {
	mods = append(mods, qm.From("\"users_permissions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"users_permissions\".*"})
	}

	return usersPermissionQuery{q}
}

// FindUsersPermission retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUsersPermission(ctx context.Context, exec boil.ContextExecutor, userID int, postID int, selectCols ...string) (*UsersPermission, error) {
	usersPermissionObj := &UsersPermission{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"users_permissions\" where \"user_id\"=$1 AND \"post_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, postID)

	err := q.Bind(ctx, exec, usersPermissionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "sqlboilergen: unable to select from users_permissions")
	}

	if err = usersPermissionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return usersPermissionObj, err
	}

	return usersPermissionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UsersPermission) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilergen: no users_permissions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersPermissionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	usersPermissionInsertCacheMut.RLock()
	cache, cached := usersPermissionInsertCache[key]
	usersPermissionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			usersPermissionAllColumns,
			usersPermissionColumnsWithDefault,
			usersPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(usersPermissionType, usersPermissionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(usersPermissionType, usersPermissionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"users_permissions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"users_permissions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "sqlboilergen: unable to insert into users_permissions")
	}

	if !cached {
		usersPermissionInsertCacheMut.Lock()
		usersPermissionInsertCache[key] = cache
		usersPermissionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the UsersPermission.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UsersPermission) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	usersPermissionUpdateCacheMut.RLock()
	cache, cached := usersPermissionUpdateCache[key]
	usersPermissionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			usersPermissionAllColumns,
			usersPermissionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("sqlboilergen: unable to update users_permissions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"users_permissions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, usersPermissionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(usersPermissionType, usersPermissionMapping, append(wl, usersPermissionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: unable to update users_permissions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: failed to get rows affected by update for users_permissions")
	}

	if !cached {
		usersPermissionUpdateCacheMut.Lock()
		usersPermissionUpdateCache[key] = cache
		usersPermissionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q usersPermissionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: unable to update all for users_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: unable to retrieve rows affected for users_permissions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UsersPermissionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("sqlboilergen: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"users_permissions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, usersPermissionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: unable to update all in usersPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: unable to retrieve rows affected all in update all usersPermission")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UsersPermission) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("sqlboilergen: no users_permissions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(usersPermissionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	usersPermissionUpsertCacheMut.RLock()
	cache, cached := usersPermissionUpsertCache[key]
	usersPermissionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			usersPermissionAllColumns,
			usersPermissionColumnsWithDefault,
			usersPermissionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			usersPermissionAllColumns,
			usersPermissionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("sqlboilergen: unable to upsert users_permissions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(usersPermissionPrimaryKeyColumns))
			copy(conflict, usersPermissionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"users_permissions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(usersPermissionType, usersPermissionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(usersPermissionType, usersPermissionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "sqlboilergen: unable to upsert users_permissions")
	}

	if !cached {
		usersPermissionUpsertCacheMut.Lock()
		usersPermissionUpsertCache[key] = cache
		usersPermissionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single UsersPermission record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UsersPermission) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("sqlboilergen: no UsersPermission provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), usersPermissionPrimaryKeyMapping)
	sql := "DELETE FROM \"users_permissions\" WHERE \"user_id\"=$1 AND \"post_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: unable to delete from users_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: failed to get rows affected by delete for users_permissions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q usersPermissionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("sqlboilergen: no usersPermissionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: unable to delete all from users_permissions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: failed to get rows affected by deleteall for users_permissions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UsersPermissionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(usersPermissionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"users_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersPermissionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: unable to delete all from usersPermission slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "sqlboilergen: failed to get rows affected by deleteall for users_permissions")
	}

	if len(usersPermissionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UsersPermission) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUsersPermission(ctx, exec, o.UserID, o.PostID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UsersPermissionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UsersPermissionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), usersPermissionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"users_permissions\".* FROM \"users_permissions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, usersPermissionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "sqlboilergen: unable to reload all in UsersPermissionSlice")
	}

	*o = slice

	return nil
}

// UsersPermissionExists checks if the UsersPermission row exists.
func UsersPermissionExists(ctx context.Context, exec boil.ContextExecutor, userID int, postID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"users_permissions\" where \"user_id\"=$1 AND \"post_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, userID, postID)
	}
	row := exec.QueryRowContext(ctx, sql, userID, postID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "sqlboilergen: unable to check if users_permissions exists")
	}

	return exists, nil
}
